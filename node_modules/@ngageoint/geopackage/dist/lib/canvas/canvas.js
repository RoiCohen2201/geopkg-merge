"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Canvas = void 0;
var Canvas = /** @class */ (function () {
    function Canvas() {
    }
    Canvas.registerCanvasAdapter = function (adapter) {
        Canvas.adapter = new adapter();
    };
    Canvas.adapterInitialized = function () {
        return Canvas.adapter != null && Canvas.adapter.isInitialized();
    };
    Canvas.initializeAdapter = function () {
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (Canvas.adapter.isInitialized()) {
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, Canvas.adapter.initialize()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        if (err_1 instanceof Error) {
                            throw err_1;
                        }
                        throw new Error('error intializing canvas adapter: ' + String(err_1));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Canvas.checkCanvasAdapter = function () {
        if (!Canvas.adapter) {
            throw new Error('Canvas adapter not registered.');
        }
        else if (!Canvas.adapter.isInitialized()) {
            throw new Error('Canvas adapter not initialized.');
        }
    };
    Canvas.create = function (width, height) {
        Canvas.checkCanvasAdapter();
        return Canvas.adapter.create(width, height);
    };
    Canvas.createImage = function (data, contentType) {
        if (contentType === void 0) { contentType = 'image/png'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                Canvas.checkCanvasAdapter();
                return [2 /*return*/, Canvas.adapter.createImage(data, contentType)];
            });
        });
    };
    Canvas.createImageData = function (width, height) {
        Canvas.checkCanvasAdapter();
        return Canvas.adapter.createImageData(width, height);
    };
    Canvas.disposeCanvas = function (canvas) {
        Canvas.checkCanvasAdapter();
        Canvas.adapter.disposeCanvas(canvas);
    };
    Canvas.measureText = function (context, fontFace, fontSize, text) {
        Canvas.checkCanvasAdapter();
        return Canvas.adapter.measureText(context, fontFace, fontSize, text);
    };
    Canvas.drawText = function (context, text, location, fontFace, fontSize, fontColor) {
        Canvas.checkCanvasAdapter();
        return Canvas.adapter.drawText(context, text, location, fontFace, fontSize, fontColor);
    };
    Canvas.scaleImage = function (image, scale) {
        Canvas.checkCanvasAdapter();
        return Canvas.adapter.scaleImage(image, scale);
    };
    Canvas.scaleImageToDimensions = function (image, scaledWidth, scaledHeight) {
        Canvas.checkCanvasAdapter();
        return Canvas.adapter.scaleImageToDimensions(image, scaledWidth, scaledHeight);
    };
    Canvas.toDataURL = function (canvas, format) {
        if (format === void 0) { format = 'image/png'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                Canvas.checkCanvasAdapter();
                return [2 /*return*/, Canvas.adapter.toDataURL(canvas, format)];
            });
        });
    };
    Canvas.disposeImage = function (image) {
        Canvas.checkCanvasAdapter();
        Canvas.adapter.disposeImage(image);
    };
    Canvas.adapter = undefined;
    return Canvas;
}());
exports.Canvas = Canvas;
//# sourceMappingURL=canvas.js.map